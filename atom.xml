<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萌萌哒的童话</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://michaelxiang.me/"/>
  <updated>2018-09-14T06:06:46.281Z</updated>
  <id>http://michaelxiang.me/</id>
  
  <author>
    <name>周红</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>push</title>
    <link href="http://michaelxiang.me/uncategorized/push/"/>
    <id>http://michaelxiang.me/uncategorized/push/</id>
    <published>2018-09-14T06:06:46.000Z</published>
    <updated>2018-09-14T06:06:46.281Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git常用操作</title>
    <link href="http://michaelxiang.me/git/action/"/>
    <id>http://michaelxiang.me/git/action/</id>
    <published>2018-09-03T07:54:13.000Z</published>
    <updated>2018-09-14T06:24:39.304Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>多人开发需要创建分支<br>在终端执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b create_product //创建分支 create_product 为创建的分支的名字</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;init&apos;</span><br><span class="line">git push  复制出来的git push 链接</span><br></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/api/personal/file/WEB65905f73ff8c6c0f882b952f48417526?method=download&amp;shareKey=400be717732b86e49cdaf9a2013bfcfa" alt="image"></p></li><li><p>切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line">git checkout 你要去的分支的名字</span><br></pre></td></tr></table></figure></li><li><p>将其他分支的修改合并到当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git merge Invoicing //Invoicing分支的名字</span><br><span class="line">git status</span><br><span class="line">git add —a</span><br><span class="line">git commit</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>拉取主干代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop //develop 为主分支名字</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;多人开发需要创建分支&lt;br&gt;在终端执行下列命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="git" scheme="http://michaelxiang.me/categories/git/"/>
    
    
      <category term="git" scheme="http://michaelxiang.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git修改分支名字</title>
    <link href="http://michaelxiang.me/git/git/"/>
    <id>http://michaelxiang.me/git/git/</id>
    <published>2018-09-03T07:54:13.000Z</published>
    <updated>2018-09-05T06:24:36.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-修改分支名称"><a href="#git-修改分支名称" class="headerlink" title="git 修改分支名称"></a>git 修改分支名称</h1><p>假设分支名称为 oldName<br>想要修改为 newName</p><ol><li><strong> 本地分支重命名(还没有推送到远程) </strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m oldName newName</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong> 远程分支重命名 (已经推送远程-假设本地分支和远程对应分支名称相同) </strong><br>a. <strong> 重命名远程分支对应的本地分支 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m oldName newName</span><br></pre></td></tr></table></figure><p>b. <strong> 删除远程分支 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --delete origin oldName</span><br></pre></td></tr></table></figure><p>c. <strong> 上传新命名的本地分支 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin newName</span><br></pre></td></tr></table></figure><p>d. <strong> 把修改后的本地分支与远程分支关联 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to origin/newName</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-修改分支名称&quot;&gt;&lt;a href=&quot;#git-修改分支名称&quot; class=&quot;headerlink&quot; title=&quot;git 修改分支名称&quot;&gt;&lt;/a&gt;git 修改分支名称&lt;/h1&gt;&lt;p&gt;假设分支名称为 oldName&lt;br&gt;想要修改为 newName&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="git" scheme="http://michaelxiang.me/categories/git/"/>
    
    
      <category term="git" scheme="http://michaelxiang.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置</title>
    <link href="http://michaelxiang.me/nginx/config/"/>
    <id>http://michaelxiang.me/nginx/config/</id>
    <published>2018-09-03T07:54:13.000Z</published>
    <updated>2018-09-14T03:42:17.434Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>远程登录服务器 使用ssh命令<br>在终端执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh dev@39.106.111.163 注意使用dev不要使用root</span><br></pre></td></tr></table></figure></li><li><p>输入密码 </p></li><li><p>进入nginx中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br></pre></td></tr></table></figure></li><li><p>查看虚拟主机的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd sites-avaliable</span><br></pre></td></tr></table></figure></li><li><p>新建一个conf配置文件<br>在现有的conf文件中拷贝一份<br>cp 现有的某个.conf配置文件   自己新建的文件名字.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp web.conf esharing.conf</span><br></pre></td></tr></table></figure></li><li><p>过程中遇到权限问题 请使用sudo!!</p></li><li>先开放你新建的conf的权限<br>命令 chmod 777 ehsharing.conf</li><li>打开新建的conf文件<br>修改server下面的listen监听端口改为80 server name域名和root路径<br>vi esharing.conf 通过i命令实现修改 修改之后点击esc然后:wq保存</li><li>cd sites-avaliable<br>ln -s 源文件目录 建立软连接的目录<br>例如 ln -s /etc/nginx/sites-available/esharing.conf   /etc/nginx/sites-enables/esharing.conf</li><li>你配置的conf中的root路径如果不存在需要新建一个<br>例如 你配置的路径为/data/esharing/web<br>命令为 cd /data/esharing/ <pre><code>mkdir web</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;远程登录服务器 使用ssh命令&lt;br&gt;在终端执行下列命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
      <category term="nginx" scheme="http://michaelxiang.me/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://michaelxiang.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置</title>
    <link href="http://michaelxiang.me/nginx/nginx/"/>
    <id>http://michaelxiang.me/nginx/nginx/</id>
    <published>2018-09-03T07:54:13.000Z</published>
    <updated>2018-09-14T03:27:32.839Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装<br>在终端执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>关闭<br>查看主进程号 ps -ef | grep nginx<br>从容停止 kill -QUIT 主进程号<br>快速停止 kill -TERM 主进程号<br>强制停止 kill -9 nginx</p></li><li><p>配置步骤</p><ul><li>把build后的包放到/usr/local/Cellar/nginx/1.15.0目录下</li><li>修改/usr/local/etc/nginx/nginx.conf文件配置</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">     root   build;</span><br><span class="line">     index  index.html index.htm;</span><br><span class="line">     try_files $uri $uri/ /index.html;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> location ^~ /api/ &#123;</span><br><span class="line">     proxy_pass http://47.92.88.235:8082/;</span><br><span class="line">     proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">     proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">     proxy_set_header   Host             $host;</span><br><span class="line">     proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">     proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> location ~* /.html$ &#123; </span><br><span class="line">     add_header Cache-Control &quot;no-store, no-cache&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> location ~* /.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|eot|ttf)$ &#123; expires max;&#125;</span><br><span class="line"> location ~* /.(?:css|js|js/.map)$ &#123; expires max;&#125;</span><br></pre></td></tr></table></figure><p>1.root 为根目录默认路径<br>2.try_files $uri $uri/ /index.html;<br>因为browserRouter的原因，需要将每个uri指向index.html<br>3.location ~* /.html$ 为html设置不缓存</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;br&gt;在终端执行下列命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/t
      
    
    </summary>
    
      <category term="nginx" scheme="http://michaelxiang.me/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://michaelxiang.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app如何使用sass</title>
    <link href="http://michaelxiang.me/%E5%89%8D%E7%AB%AF/sass/"/>
    <id>http://michaelxiang.me/前端/sass/</id>
    <published>2018-09-03T07:54:13.000Z</published>
    <updated>2018-09-14T03:55:07.520Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装<br>在终端执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-loder node-sass —save-dev</span><br></pre></td></tr></table></figure></li><li><p>在node_modules/react-scripts/config 下找到webpack.config.dev.js文件,在exclude中添加/.scss$/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure></li><li><p>并在loaders中添加一项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.scss$/, loaders: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos;],&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/api/personal/file/WEBfd6a7854cc5e94f1a1b8b65dfde5e611?method=download&amp;shareKey=92c5d29855c89098f421e901f92c3c9a" alt="image"><br>至此，Sass 就配置好了。<br>注意，我们只是修改了 webpack.config.dev.js ,如果要在生产环境中生效，需要在webpack.config.prod.js做同样的配置</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;br&gt;在终端执行下列命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/t
      
    
    </summary>
    
      <category term="前端" scheme="http://michaelxiang.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://michaelxiang.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>在react-native中使用mobx</title>
    <link href="http://michaelxiang.me/mobx/mobx/"/>
    <id>http://michaelxiang.me/mobx/mobx/</id>
    <published>2018-09-03T07:54:13.000Z</published>
    <updated>2018-09-05T06:53:18.640Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong> 安装相应依赖：mobx 和 mobx-react </strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mobx mobx-react --save</span><br></pre></td></tr></table></figure></li><li><p><strong> 安装一些 babel 插件，以支持 ES7 的 decorator 特性: </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0 --save-dev</span><br></pre></td></tr></table></figure></li><li><p><strong> 打开 .babelrc 没有就创建一个，配置 babel 插件: </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .babelrc</span><br></pre></td></tr></table></figure><p><strong> 写入 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&apos;presets&apos;: [&apos;react-native&apos;],</span><br><span class="line">&apos;plugins&apos;: [&apos;transform-decorators-legacy&apos;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> 补充:ES7 装饰器语法在编译器可能会报错；我这里用的是 vscode，分享解决办法： </strong></p><ol><li>找到 首选项 &gt; 设置 &gt; 工作区设置;</li><li>加入以下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;javascript.implicitProjectConfig.experimentalDecorators&quot;: true</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong> 加入 mobx </strong></p><ol><li>根目录下新建 js 文件夹； js 下新建 store 文件夹；</li><li>store 下新建 index.js 作用是合并每个 store 到一个 store 中去，最终通过Provider {…store}方式注入App</li><li><p>分别在 store 下新建几个 js，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class HomeStore &#123;</span><br><span class="line">@observable text; // 注册变量，使其成为可检测的</span><br><span class="line">@observable num;</span><br><span class="line">constructor() &#123;</span><br><span class="line">this.num = 0; // 初始化变量，可以定义默认值</span><br><span class="line">this.text = &quot;Hello, this is homePage!!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@action // 方法推荐用箭头函数的形式</span><br><span class="line"> plus = () =&gt; &#123;</span><br><span class="line"> this.num += 1;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">@action</span><br><span class="line"> minus = () =&gt; &#123;</span><br><span class="line"> this.num -= 1; </span><br><span class="line"> &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">const homeStore = new HomeStore();</span><br><span class="line"></span><br><span class="line">export &#123; homeStore &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// user</span><br><span class="line">import &#123; observable, action &#125; from &quot;mobx&quot;;</span><br><span class="line"></span><br><span class="line">class UserStore &#123;</span><br><span class="line">  @observable userInfo;</span><br><span class="line">  @observable text;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.userInfo = &quot;123&quot;;</span><br><span class="line">    this.text = &quot;Hello, this is UserPage!!!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @action</span><br><span class="line">  getListData = () =&gt; &#123;</span><br><span class="line">    fetch(`http://yapi.demo.qunar.com/mock/5228/record/list`)</span><br><span class="line">      .then(</span><br><span class="line">        action(&quot;fetchRes&quot;, res =&gt; &#123;</span><br><span class="line">          return res.json();</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">      .then(</span><br><span class="line">        action(&quot;fetchSuccess&quot;, data =&gt; &#123;</span><br><span class="line">          return (this.userInfo = data);</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">      .catch(</span><br><span class="line">        action(&quot;fetchError&quot;, e =&gt; &#123;</span><br><span class="line">          console.log(e.message);</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const userStore = new UserStore();</span><br><span class="line"></span><br><span class="line">export &#123; userStore &#125;;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong> 通过index文件合并 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; homeStore &#125; from &quot;./home&quot;;</span><br><span class="line">import &#123; userStore &#125; from &quot;./user&quot;;</span><br><span class="line"></span><br><span class="line">const store = &#123; homeStore, userStore &#125;;</span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><strong> 在组件中使用mobx </strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  import &#123; observer, inject &#125; from &quot;mobx-react&quot;</span><br><span class="line">  @inject([&quot;homeStore&quot;]) // 注入对应的store</span><br><span class="line">  @observer // 监听当前组件</span><br><span class="line">  class HomeScreen extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.store = this.props.homeStore; //通过props来导入访问已注入的store</span><br><span class="line">    this.state = &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; text, num &#125; = this.store;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Container&gt;</span><br><span class="line">        &lt;Headers </span><br><span class="line">        title=&quot;首页&quot; </span><br><span class="line">        type=&apos;index&apos; </span><br><span class="line">        navigation=&#123;this.props.navigation&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Text&gt;&#123;text&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;Button primary onPress=&#123;() =&gt; this.store.plus()&#125;&gt;</span><br><span class="line">          &lt;Text&gt;add&lt;/Text&gt;</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">        &lt;Text&gt;&#123;num&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;Button primary onPress=&#123;() =&gt; this.store.minus()&#125;&gt;</span><br><span class="line">          &lt;Text&gt;Minu&lt;/Text&gt;</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">      &lt;/Container&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default HomeScreen;</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p><strong> 目前组件中还拿不到当前组件的store，接下来注入store；</strong><br>在初始化的项目结构中，项目运行的入口文件是index.js,注册了同级目录下的App.js;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line"></span><br><span class="line">import &#123; AppRegistry &#125; from &apos;react-native&apos;;</span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(&apos;demo&apos;, () =&gt; App);</span><br></pre></td></tr></table></figure><p>由于需要在App.js上套入store 所以改写结构，</p><ol><li><p>新建setup.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; Provider &#125; from &quot;mobx-react&quot;;</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line">import store from &quot;./store&quot;;</span><br><span class="line"></span><br><span class="line">export default function setup() &#123;</span><br><span class="line">  class Root extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;Provider &#123;...store&#125;&gt;</span><br><span class="line">          &lt;App /&gt;</span><br><span class="line">        &lt;/Provider&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return Root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改index启动页代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AppRegistry &#125; from &apos;react-native&apos;;</span><br><span class="line">import setup from &quot;./js/setup&quot;;</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(&apos;******&apos;, () =&gt; setup());</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt; 安装相应依赖：mobx 和 mobx-react &lt;/strong&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
      
    
    </summary>
    
      <category term="mobx" scheme="http://michaelxiang.me/categories/mobx/"/>
    
    
      <category term="mobx" scheme="http://michaelxiang.me/tags/mobx/"/>
    
  </entry>
  
  <entry>
    <title>git的配置以及使用</title>
    <link href="http://michaelxiang.me/git/gitConfig/"/>
    <id>http://michaelxiang.me/git/gitConfig/</id>
    <published>2018-09-03T07:54:13.000Z</published>
    <updated>2018-09-14T06:26:52.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-修改分支名称"><a href="#git-修改分支名称" class="headerlink" title="git 修改分支名称"></a>git 修改分支名称</h1><p>假设分支名称为 oldName<br>想要修改为 newName</p><ol><li><strong> 本地分支重命名(还没有推送到远程) </strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m oldName newName</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong> 远程分支重命名 (已经推送远程-假设本地分支和远程对应分支名称相同) </strong><br>a. <strong> 重命名远程分支对应的本地分支 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m oldName newName</span><br></pre></td></tr></table></figure><p>b. <strong> 删除远程分支 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --delete origin oldName</span><br></pre></td></tr></table></figure><p>c. <strong> 上传新命名的本地分支 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin newName</span><br></pre></td></tr></table></figure><p>d. <strong> 把修改后的本地分支与远程分支关联 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to origin/newName</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-修改分支名称&quot;&gt;&lt;a href=&quot;#git-修改分支名称&quot; class=&quot;headerlink&quot; title=&quot;git 修改分支名称&quot;&gt;&lt;/a&gt;git 修改分支名称&lt;/h1&gt;&lt;p&gt;假设分支名称为 oldName&lt;br&gt;想要修改为 newName&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="git" scheme="http://michaelxiang.me/categories/git/"/>
    
    
      <category term="git" scheme="http://michaelxiang.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>macOS系统下的React Native 开发环境配置</title>
    <link href="http://michaelxiang.me/react-native/react-native/"/>
    <id>http://michaelxiang.me/react-native/react-native/</id>
    <published>2018-08-31T13:38:40.000Z</published>
    <updated>2018-09-14T03:47:39.142Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong> Homebrew安装 </strong><br>Homebrew是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程，Homebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默认安装在/usr/local，由一个核心git版本库构成，以使用户能更新Homebrew。是 OS X 不可或缺的套件管理器。<br>安装之前，你可以先检查一下电脑上是否已经安装了Homebrew，检查方式如下：<br>在终端执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew -v</span><br></pre></td></tr></table></figure><p> 如果已经安装了，终端会显示版本号。<br> 如果没有安装，那就可以用下面这种方式，进行安装，在终端上直接输入下面的命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong> node.js安装 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node &amp;&amp; nvm alias default node</span><br></pre></td></tr></table></figure></li><li><p><strong> 安装watchman 和 flow </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install watchman</span><br><span class="line">brew install flow</span><br></pre></td></tr></table></figure></li><li><p><strong> 安装React Native </strong><br>我们使用npm进行安装，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure><p> 安装完React Native之后，要想运行或者初始化一个项目，然后运行到模拟器或者真机，我们需要搭建一个Android或者ios开发环境，我这里只介绍android，相信想学习React Native的同学，电脑上都基本上有了Android的开发环境。但是可能会有坑，有一个大坑就是得配置SDK的环境变量：ANDROID_HOME。</p></li><li><strong> SDK环境变量的配置 </strong></li></ol><ul><li>启动Terminal终端工具</li><li>输入cd ~/ 进入当前用户的home目录</li><li><p>创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure><p>  打开并编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .bash_profile</span><br></pre></td></tr></table></figure><p>  在文件中写入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PATH&#125;:/Users/loonggg/Application/android-sdk-mac_x86/tools:/Users/loonggg/Application/android-sdk-mac_x86/platform-tools</span><br></pre></td></tr></table></figure><p>  友情提示：上述路径，请换成自己电脑上的SDK所在路径</p></li><li><p>执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure></li><li><p>验证：输入adb回车。如果未显示command not found，说明此命令有效，环境便设置完成。</p></li></ul><ol start="6"><li><p><strong> 创建我们的第一个React Native应用 </strong></p><ul><li>初始化项目<br>上面的AwesomeProject这个项目名字，你可以自己随意定义，自己命名，没有限制。</li><li><p>运行项目<br>切换到AwesomeProject的主目录<br>运行项目命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android</span><br><span class="line">react-native run-ios</span><br></pre></td></tr></table></figure><p>执行react-native run-ios 遇到下面错误：<br>xcrun: error: unable to find utility “instruments”, not a developer tool or in PATH</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select -s /Applications/Xcode.app/Contents/Developer/</span><br></pre></td></tr></table></figure><p>我们使用编辑器打开和修改app.js文件，调出模拟器菜单键，选择重新载入 js 即可看到变化。<br>执行react-native run-android 遇到下面错误<br>java.lang.RuntimeException: SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.<br>解决方法：在工程的根目录下的android文件下新建一个local.properties的文件，在文件中写入<br>sdk.dir = /Users/jinwenfeng/Documents/android/android-sdk-macosx<br>这里就是androidsdk的路径，至此问题一成功解决</p></li><li>安卓打包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd android &amp;&amp; ./gradlew assembleRelease</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt; Homebrew安装 &lt;/strong&gt;&lt;br&gt;Homebrew是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程，Homebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默
      
    
    </summary>
    
      <category term="react-native" scheme="http://michaelxiang.me/categories/react-native/"/>
    
    
      <category term="react-native" scheme="http://michaelxiang.me/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>typescript</title>
    <link href="http://michaelxiang.me/%E5%89%8D%E7%AB%AF/typescript/"/>
    <id>http://michaelxiang.me/前端/typescript/</id>
    <published>2018-08-31T13:38:40.000Z</published>
    <updated>2018-09-04T01:45:35.325Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端" scheme="http://michaelxiang.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://michaelxiang.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
